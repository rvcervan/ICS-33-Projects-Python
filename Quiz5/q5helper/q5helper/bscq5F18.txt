# Setup
c-->from importlib import reload
c-->import q5solution
c-->reload(q5solution)
c-->import predicate,random
c-->from functools import reduce
c-->from q5solution import separate, is_sorted, sort, merge_chars, nested_count

# Test separate
e-->separate(predicate.is_positive,[])-->([], [])
c-->s = separate(predicate.is_positive,[1, -3, -2, 4, 0, -1, 8])
==-->(set(s[0]),set(s[1]))-->({1, 4, 8}, {-3, -2, 0, -1})
c-->s = separate(predicate.is_prime,[i for i in range(2,21)])
==-->(set(s[0]),set(s[1]))-->({2, 3, 5, 7, 11, 13, 17, 19}, {4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20})
c-->s = separate(lambda x : len(x) <= 3,'to be or not to be that is the question'.split(' '))
==-->(set(s[0]),set(s[1]))-->({'to', 'be', 'or', 'not', 'to', 'be', 'is', 'the'}, {'that', 'question'})
c-->s = separate(lambda x : x <= 'm','to be or not to be that is the question'.split(' '))
==-->(set(s[0]),set(s[1]))-->({'be', 'is'}, {'the', 'question', 'not', 'that', 'or', 'to'})

# Test is_sorted
e-->is_sorted([])-->True
e-->is_sorted([0])-->True
e-->is_sorted([-5,-4])-->True
e-->is_sorted([1,2,3,4,5,6,7])-->True
e-->is_sorted([1,2,3,7,4,5,6])-->False
e-->is_sorted([1,2,3,4,5,6,5])-->False
e-->is_sorted([7,6,5,4,3,2,1])-->False

# Test sort
e-->sort([1,2,3,4,5,6,7])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([7,6,5,4,3,2,1])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([4,5,3,1,2,7,6])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([1,7,2,6,3,5,4])-->[1, 2, 3, 4, 5, 6, 7]
c-->l = [i+1 for i in range(30)]
c-->random.shuffle(l)
c-->l = sort(l)
e-->l-->[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

# Test merge_chars
e-->merge_chars('','')-->
e-->merge_chars('','abc')-->abc
e-->merge_chars('abc','')-->abc
e-->merge_chars('ace','bdf')-->abcdef
e-->merge_chars('abc','xyz')-->abcxyz
e-->merge_chars('abxy','lmzzz')-->ablmxyzzz
e-->merge_chars('acdeghilmnosu','bfjkpqrtvwxyz')-->abcdefghijklmnopqrstuvwxyz
e-->merge_chars('bcgprvyz','adefhijklmnoqstuwx')-->abcdefghijklmnopqrstuvwxyz
e-->merge_chars('cdefghijklmnpqrstuvw','aboxyz')-->abcdefghijklmnopqrstuvwxyz
c-->l = [c for c in 'abcdefghijklmnopqrstuvwxyz']
c-->random.shuffle(l)
e-->merge_chars(''.join(sorted(l[:13])), ''.join(sorted(l[13:])))-->abcdefghijklmnopqrstuvwxyz

# Test nested_count
e-->nested_count([1,2,4,1,8,1,3,2,1,1],1)-->5
e-->nested_count([[1,2,4,1,8],[1,3,2],1,1],1)-->5
e-->nested_count([[1,2,[4,[1],8],[1,3,2]],[1,1]],1)-->5
